//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FXSupplierPortal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FibConsoEntities : DbContext
    {
        public FibConsoEntities()
            : base("name=FibConsoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<a_conso_sup_map_tbl> a_conso_sup_map_tbl { get; set; }
        public virtual DbSet<acct_mgrp> acct_mgrp { get; set; }
        public virtual DbSet<acct_sgrp> acct_sgrp { get; set; }
        public virtual DbSet<acct_type> acct_type { get; set; }
        public virtual DbSet<branch_master> branch_master { get; set; }
        public virtual DbSet<bspl_det_master> bspl_det_master { get; set; }
        public virtual DbSet<bspl_master> bspl_master { get; set; }
        public virtual DbSet<bspl_mgrp_master> bspl_mgrp_master { get; set; }
        public virtual DbSet<bspl_sgrp_master> bspl_sgrp_master { get; set; }
        public virtual DbSet<cm_unified_mapping> cm_unified_mapping { get; set; }
        public virtual DbSet<conso_sup_list_dm_final_2> conso_sup_list_dm_final_2 { get; set; }
        public virtual DbSet<conso_sup_list_dm_temp_2> conso_sup_list_dm_temp_2 { get; set; }
        public virtual DbSet<conso_sup_map_tbl> conso_sup_map_tbl { get; set; }
        public virtual DbSet<conso_sup_map_tbl_del> conso_sup_map_tbl_del { get; set; }
        public virtual DbSet<country_table> country_table { get; set; }
        public virtual DbSet<customer_business> customer_business { get; set; }
        public virtual DbSet<domain> domains { get; set; }
        public virtual DbSet<labour_supply_master> labour_supply_master { get; set; }
        public virtual DbSet<project_master> project_master { get; set; }
        public virtual DbSet<supply_labour_employee> supply_labour_employee { get; set; }
        public virtual DbSet<conso_sup_list> conso_sup_list { get; set; }
        public virtual DbSet<conso_sup_list_dm_final_2_backup> conso_sup_list_dm_final_2_backup { get; set; }
        public virtual DbSet<conso_sup_list_opt> conso_sup_list_opt { get; set; }
        public virtual DbSet<conso_sup_list_tmp> conso_sup_list_tmp { get; set; }
        public virtual DbSet<conso_sup_map_tbl_backup> conso_sup_map_tbl_backup { get; set; }
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<customer_4_2017_backup> customer_4_2017_backup { get; set; }
        public virtual DbSet<customer_LMS> customer_LMS { get; set; }
        public virtual DbSet<VW_COST_CODE_MASTER> VW_COST_CODE_MASTER { get; set; }
        public virtual DbSet<VW_MATRECTRANS> VW_MATRECTRANS { get; set; }
        public virtual DbSet<VW_POLINERECEIVING> VW_POLINERECEIVING { get; set; }
        public virtual DbSet<VW_PORECEIVING> VW_PORECEIVING { get; set; }
        public virtual DbSet<VW_PRODUCT_MASTER> VW_PRODUCT_MASTER { get; set; }
        public virtual DbSet<VW_SUPPYMTTRANS> VW_SUPPYMTTRANS { get; set; }
    
        [DbFunction("FibConsoEntities", "GetCostCode")]
        public virtual IQueryable<GetCostCode_Result> GetCostCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCostCode_Result>("[FibConsoEntities].[GetCostCode]()");
        }
    
        public virtual int AddAccountMainGroup(Nullable<short> iAccountType, Nullable<short> iMainGroupCode, string iMainGroupDesc, string iMainGroupDescAr, Nullable<short> imode, Nullable<short> bsplmaincode, Nullable<short> bsplsubcode, Nullable<short> bsplcode)
        {
            var iAccountTypeParameter = iAccountType.HasValue ?
                new ObjectParameter("iAccountType", iAccountType) :
                new ObjectParameter("iAccountType", typeof(short));
    
            var iMainGroupCodeParameter = iMainGroupCode.HasValue ?
                new ObjectParameter("iMainGroupCode", iMainGroupCode) :
                new ObjectParameter("iMainGroupCode", typeof(short));
    
            var iMainGroupDescParameter = iMainGroupDesc != null ?
                new ObjectParameter("iMainGroupDesc", iMainGroupDesc) :
                new ObjectParameter("iMainGroupDesc", typeof(string));
    
            var iMainGroupDescArParameter = iMainGroupDescAr != null ?
                new ObjectParameter("iMainGroupDescAr", iMainGroupDescAr) :
                new ObjectParameter("iMainGroupDescAr", typeof(string));
    
            var imodeParameter = imode.HasValue ?
                new ObjectParameter("imode", imode) :
                new ObjectParameter("imode", typeof(short));
    
            var bsplmaincodeParameter = bsplmaincode.HasValue ?
                new ObjectParameter("bsplmaincode", bsplmaincode) :
                new ObjectParameter("bsplmaincode", typeof(short));
    
            var bsplsubcodeParameter = bsplsubcode.HasValue ?
                new ObjectParameter("bsplsubcode", bsplsubcode) :
                new ObjectParameter("bsplsubcode", typeof(short));
    
            var bsplcodeParameter = bsplcode.HasValue ?
                new ObjectParameter("bsplcode", bsplcode) :
                new ObjectParameter("bsplcode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAccountMainGroup", iAccountTypeParameter, iMainGroupCodeParameter, iMainGroupDescParameter, iMainGroupDescArParameter, imodeParameter, bsplmaincodeParameter, bsplsubcodeParameter, bsplcodeParameter);
        }
    
        public virtual int AddAccountSubGroup(Nullable<short> iAccountType, Nullable<short> iMainGroupCode, Nullable<short> iSubGroupCode, string iSubGroupDesc, string iSubGroupDescAr, Nullable<bool> iExcOsInv)
        {
            var iAccountTypeParameter = iAccountType.HasValue ?
                new ObjectParameter("iAccountType", iAccountType) :
                new ObjectParameter("iAccountType", typeof(short));
    
            var iMainGroupCodeParameter = iMainGroupCode.HasValue ?
                new ObjectParameter("iMainGroupCode", iMainGroupCode) :
                new ObjectParameter("iMainGroupCode", typeof(short));
    
            var iSubGroupCodeParameter = iSubGroupCode.HasValue ?
                new ObjectParameter("iSubGroupCode", iSubGroupCode) :
                new ObjectParameter("iSubGroupCode", typeof(short));
    
            var iSubGroupDescParameter = iSubGroupDesc != null ?
                new ObjectParameter("iSubGroupDesc", iSubGroupDesc) :
                new ObjectParameter("iSubGroupDesc", typeof(string));
    
            var iSubGroupDescArParameter = iSubGroupDescAr != null ?
                new ObjectParameter("iSubGroupDescAr", iSubGroupDescAr) :
                new ObjectParameter("iSubGroupDescAr", typeof(string));
    
            var iExcOsInvParameter = iExcOsInv.HasValue ?
                new ObjectParameter("iExcOsInv", iExcOsInv) :
                new ObjectParameter("iExcOsInv", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAccountSubGroup", iAccountTypeParameter, iMainGroupCodeParameter, iSubGroupCodeParameter, iSubGroupDescParameter, iSubGroupDescArParameter, iExcOsInvParameter);
        }
    
        public virtual int AddEditBsPlMaingroupMaster(Nullable<short> code, string name, string mode, string nameAr)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var nameArParameter = nameAr != null ?
                new ObjectParameter("nameAr", nameAr) :
                new ObjectParameter("nameAr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditBsPlMaingroupMaster", codeParameter, nameParameter, modeParameter, nameArParameter);
        }
    
        public virtual int AddEditBsPlMaster(Nullable<short> mcode, Nullable<short> scode, Nullable<short> code, string name, string mode, string nameAr)
        {
            var mcodeParameter = mcode.HasValue ?
                new ObjectParameter("mcode", mcode) :
                new ObjectParameter("mcode", typeof(short));
    
            var scodeParameter = scode.HasValue ?
                new ObjectParameter("scode", scode) :
                new ObjectParameter("scode", typeof(short));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var nameArParameter = nameAr != null ?
                new ObjectParameter("nameAr", nameAr) :
                new ObjectParameter("nameAr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditBsPlMaster", mcodeParameter, scodeParameter, codeParameter, nameParameter, modeParameter, nameArParameter);
        }
    
        public virtual int AddEditBsPlSubgroupMaster(Nullable<short> mcode, Nullable<short> scode, string name, string mode, string nameAr)
        {
            var mcodeParameter = mcode.HasValue ?
                new ObjectParameter("mcode", mcode) :
                new ObjectParameter("mcode", typeof(short));
    
            var scodeParameter = scode.HasValue ?
                new ObjectParameter("scode", scode) :
                new ObjectParameter("scode", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var nameArParameter = nameAr != null ?
                new ObjectParameter("nameAr", nameAr) :
                new ObjectParameter("nameAr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditBsPlSubgroupMaster", mcodeParameter, scodeParameter, nameParameter, modeParameter, nameArParameter);
        }
    
        public virtual int AddEditConProjectMaster(string iCode, string iName, string iclient, string iconsul, string iMode, ObjectParameter retValue)
        {
            var iCodeParameter = iCode != null ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(string));
    
            var iNameParameter = iName != null ?
                new ObjectParameter("iName", iName) :
                new ObjectParameter("iName", typeof(string));
    
            var iclientParameter = iclient != null ?
                new ObjectParameter("iclient", iclient) :
                new ObjectParameter("iclient", typeof(string));
    
            var iconsulParameter = iconsul != null ?
                new ObjectParameter("iconsul", iconsul) :
                new ObjectParameter("iconsul", typeof(string));
    
            var iModeParameter = iMode != null ?
                new ObjectParameter("iMode", iMode) :
                new ObjectParameter("iMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditConProjectMaster", iCodeParameter, iNameParameter, iclientParameter, iconsulParameter, iModeParameter, retValue);
        }
    
        public virtual int AddEditCustBussUnits(Nullable<int> iAccCode, Nullable<int> iRetAccCode, Nullable<int> iAdvAccCode, Nullable<int> iOrgCode, string iAccName, Nullable<int> iOrgAccCode)
        {
            var iAccCodeParameter = iAccCode.HasValue ?
                new ObjectParameter("iAccCode", iAccCode) :
                new ObjectParameter("iAccCode", typeof(int));
    
            var iRetAccCodeParameter = iRetAccCode.HasValue ?
                new ObjectParameter("iRetAccCode", iRetAccCode) :
                new ObjectParameter("iRetAccCode", typeof(int));
    
            var iAdvAccCodeParameter = iAdvAccCode.HasValue ?
                new ObjectParameter("iAdvAccCode", iAdvAccCode) :
                new ObjectParameter("iAdvAccCode", typeof(int));
    
            var iOrgCodeParameter = iOrgCode.HasValue ?
                new ObjectParameter("iOrgCode", iOrgCode) :
                new ObjectParameter("iOrgCode", typeof(int));
    
            var iAccNameParameter = iAccName != null ?
                new ObjectParameter("iAccName", iAccName) :
                new ObjectParameter("iAccName", typeof(string));
    
            var iOrgAccCodeParameter = iOrgAccCode.HasValue ?
                new ObjectParameter("iOrgAccCode", iOrgAccCode) :
                new ObjectParameter("iOrgAccCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditCustBussUnits", iAccCodeParameter, iRetAccCodeParameter, iAdvAccCodeParameter, iOrgCodeParameter, iAccNameParameter, iOrgAccCodeParameter);
        }
    
        public virtual int AddEditCustomerSuppForConsoli(Nullable<int> iCode, string iName, string iAddr1, string iAddr2, string iTel1, string iMobile, string iFax, string iEmail, Nullable<short> iPayTerm, Nullable<decimal> iCreditLimit, Nullable<int> iCtyCode, Nullable<bool> iGrpComp, Nullable<bool> iAssComp, Nullable<int> iSalCode, Nullable<int> iBSPLDrCode, Nullable<int> iBSPLCrCode, Nullable<int> iBranch, Nullable<int> iPoBox, string iContact, string iMode, Nullable<short> iCustCat, Nullable<bool> iAcctStatus, string iVatRegNo, Nullable<short> ibsplMainCode, Nullable<short> ibsplSubCode, Nullable<short> ibsplCode, Nullable<int> iretAccount, Nullable<int> iadvAccount, string iArabicName, Nullable<bool> iSubCont, string ishortName, string ilicenNo, string imcoc, string iurl, string iposition, string iusrId)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(int));
    
            var iNameParameter = iName != null ?
                new ObjectParameter("iName", iName) :
                new ObjectParameter("iName", typeof(string));
    
            var iAddr1Parameter = iAddr1 != null ?
                new ObjectParameter("iAddr1", iAddr1) :
                new ObjectParameter("iAddr1", typeof(string));
    
            var iAddr2Parameter = iAddr2 != null ?
                new ObjectParameter("iAddr2", iAddr2) :
                new ObjectParameter("iAddr2", typeof(string));
    
            var iTel1Parameter = iTel1 != null ?
                new ObjectParameter("iTel1", iTel1) :
                new ObjectParameter("iTel1", typeof(string));
    
            var iMobileParameter = iMobile != null ?
                new ObjectParameter("iMobile", iMobile) :
                new ObjectParameter("iMobile", typeof(string));
    
            var iFaxParameter = iFax != null ?
                new ObjectParameter("iFax", iFax) :
                new ObjectParameter("iFax", typeof(string));
    
            var iEmailParameter = iEmail != null ?
                new ObjectParameter("iEmail", iEmail) :
                new ObjectParameter("iEmail", typeof(string));
    
            var iPayTermParameter = iPayTerm.HasValue ?
                new ObjectParameter("iPayTerm", iPayTerm) :
                new ObjectParameter("iPayTerm", typeof(short));
    
            var iCreditLimitParameter = iCreditLimit.HasValue ?
                new ObjectParameter("iCreditLimit", iCreditLimit) :
                new ObjectParameter("iCreditLimit", typeof(decimal));
    
            var iCtyCodeParameter = iCtyCode.HasValue ?
                new ObjectParameter("iCtyCode", iCtyCode) :
                new ObjectParameter("iCtyCode", typeof(int));
    
            var iGrpCompParameter = iGrpComp.HasValue ?
                new ObjectParameter("iGrpComp", iGrpComp) :
                new ObjectParameter("iGrpComp", typeof(bool));
    
            var iAssCompParameter = iAssComp.HasValue ?
                new ObjectParameter("iAssComp", iAssComp) :
                new ObjectParameter("iAssComp", typeof(bool));
    
            var iSalCodeParameter = iSalCode.HasValue ?
                new ObjectParameter("iSalCode", iSalCode) :
                new ObjectParameter("iSalCode", typeof(int));
    
            var iBSPLDrCodeParameter = iBSPLDrCode.HasValue ?
                new ObjectParameter("iBSPLDrCode", iBSPLDrCode) :
                new ObjectParameter("iBSPLDrCode", typeof(int));
    
            var iBSPLCrCodeParameter = iBSPLCrCode.HasValue ?
                new ObjectParameter("iBSPLCrCode", iBSPLCrCode) :
                new ObjectParameter("iBSPLCrCode", typeof(int));
    
            var iBranchParameter = iBranch.HasValue ?
                new ObjectParameter("iBranch", iBranch) :
                new ObjectParameter("iBranch", typeof(int));
    
            var iPoBoxParameter = iPoBox.HasValue ?
                new ObjectParameter("iPoBox", iPoBox) :
                new ObjectParameter("iPoBox", typeof(int));
    
            var iContactParameter = iContact != null ?
                new ObjectParameter("iContact", iContact) :
                new ObjectParameter("iContact", typeof(string));
    
            var iModeParameter = iMode != null ?
                new ObjectParameter("iMode", iMode) :
                new ObjectParameter("iMode", typeof(string));
    
            var iCustCatParameter = iCustCat.HasValue ?
                new ObjectParameter("iCustCat", iCustCat) :
                new ObjectParameter("iCustCat", typeof(short));
    
            var iAcctStatusParameter = iAcctStatus.HasValue ?
                new ObjectParameter("iAcctStatus", iAcctStatus) :
                new ObjectParameter("iAcctStatus", typeof(bool));
    
            var iVatRegNoParameter = iVatRegNo != null ?
                new ObjectParameter("iVatRegNo", iVatRegNo) :
                new ObjectParameter("iVatRegNo", typeof(string));
    
            var ibsplMainCodeParameter = ibsplMainCode.HasValue ?
                new ObjectParameter("ibsplMainCode", ibsplMainCode) :
                new ObjectParameter("ibsplMainCode", typeof(short));
    
            var ibsplSubCodeParameter = ibsplSubCode.HasValue ?
                new ObjectParameter("ibsplSubCode", ibsplSubCode) :
                new ObjectParameter("ibsplSubCode", typeof(short));
    
            var ibsplCodeParameter = ibsplCode.HasValue ?
                new ObjectParameter("ibsplCode", ibsplCode) :
                new ObjectParameter("ibsplCode", typeof(short));
    
            var iretAccountParameter = iretAccount.HasValue ?
                new ObjectParameter("iretAccount", iretAccount) :
                new ObjectParameter("iretAccount", typeof(int));
    
            var iadvAccountParameter = iadvAccount.HasValue ?
                new ObjectParameter("iadvAccount", iadvAccount) :
                new ObjectParameter("iadvAccount", typeof(int));
    
            var iArabicNameParameter = iArabicName != null ?
                new ObjectParameter("iArabicName", iArabicName) :
                new ObjectParameter("iArabicName", typeof(string));
    
            var iSubContParameter = iSubCont.HasValue ?
                new ObjectParameter("iSubCont", iSubCont) :
                new ObjectParameter("iSubCont", typeof(bool));
    
            var ishortNameParameter = ishortName != null ?
                new ObjectParameter("ishortName", ishortName) :
                new ObjectParameter("ishortName", typeof(string));
    
            var ilicenNoParameter = ilicenNo != null ?
                new ObjectParameter("ilicenNo", ilicenNo) :
                new ObjectParameter("ilicenNo", typeof(string));
    
            var imcocParameter = imcoc != null ?
                new ObjectParameter("imcoc", imcoc) :
                new ObjectParameter("imcoc", typeof(string));
    
            var iurlParameter = iurl != null ?
                new ObjectParameter("iurl", iurl) :
                new ObjectParameter("iurl", typeof(string));
    
            var ipositionParameter = iposition != null ?
                new ObjectParameter("iposition", iposition) :
                new ObjectParameter("iposition", typeof(string));
    
            var iusrIdParameter = iusrId != null ?
                new ObjectParameter("iusrId", iusrId) :
                new ObjectParameter("iusrId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditCustomerSuppForConsoli", iCodeParameter, iNameParameter, iAddr1Parameter, iAddr2Parameter, iTel1Parameter, iMobileParameter, iFaxParameter, iEmailParameter, iPayTermParameter, iCreditLimitParameter, iCtyCodeParameter, iGrpCompParameter, iAssCompParameter, iSalCodeParameter, iBSPLDrCodeParameter, iBSPLCrCodeParameter, iBranchParameter, iPoBoxParameter, iContactParameter, iModeParameter, iCustCatParameter, iAcctStatusParameter, iVatRegNoParameter, ibsplMainCodeParameter, ibsplSubCodeParameter, ibsplCodeParameter, iretAccountParameter, iadvAccountParameter, iArabicNameParameter, iSubContParameter, ishortNameParameter, ilicenNoParameter, imcocParameter, iurlParameter, ipositionParameter, iusrIdParameter);
        }
    
        public virtual int AddEditLaborSupplyMaster(Nullable<int> supId, Nullable<int> supActCode, string supname, string supType, string mode)
        {
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            var supActCodeParameter = supActCode.HasValue ?
                new ObjectParameter("supActCode", supActCode) :
                new ObjectParameter("supActCode", typeof(int));
    
            var supnameParameter = supname != null ?
                new ObjectParameter("Supname", supname) :
                new ObjectParameter("Supname", typeof(string));
    
            var supTypeParameter = supType != null ?
                new ObjectParameter("SupType", supType) :
                new ObjectParameter("SupType", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditLaborSupplyMaster", supIdParameter, supActCodeParameter, supnameParameter, supTypeParameter, modeParameter);
        }
    
        public virtual int AddEditSupplier(Nullable<int> iCode, string iName, Nullable<int> iretAccount, Nullable<int> iadvAccount, Nullable<short> iPayTerm, Nullable<decimal> iCreditLimit, Nullable<byte> iAcctStatus, string iEmail, string iContact, string iposition, string iMobile, string contTel, string contExt, string regDocType, string ilicenNo, string issuingAuth, Nullable<System.DateTime> expDate, Nullable<short> iCtyCode, string iAddr1, string iAddr2, string cmCity, string iPoBox, string iTel1, string iFax, Nullable<int> supp_id, string sup_status, Nullable<System.DateTime> suppStatusDate, string compOffiName, string compShortName, Nullable<short> supCountry, string supBc, string iMode, string iusrId, string supType)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(int));
    
            var iNameParameter = iName != null ?
                new ObjectParameter("iName", iName) :
                new ObjectParameter("iName", typeof(string));
    
            var iretAccountParameter = iretAccount.HasValue ?
                new ObjectParameter("iretAccount", iretAccount) :
                new ObjectParameter("iretAccount", typeof(int));
    
            var iadvAccountParameter = iadvAccount.HasValue ?
                new ObjectParameter("iadvAccount", iadvAccount) :
                new ObjectParameter("iadvAccount", typeof(int));
    
            var iPayTermParameter = iPayTerm.HasValue ?
                new ObjectParameter("iPayTerm", iPayTerm) :
                new ObjectParameter("iPayTerm", typeof(short));
    
            var iCreditLimitParameter = iCreditLimit.HasValue ?
                new ObjectParameter("iCreditLimit", iCreditLimit) :
                new ObjectParameter("iCreditLimit", typeof(decimal));
    
            var iAcctStatusParameter = iAcctStatus.HasValue ?
                new ObjectParameter("iAcctStatus", iAcctStatus) :
                new ObjectParameter("iAcctStatus", typeof(byte));
    
            var iEmailParameter = iEmail != null ?
                new ObjectParameter("iEmail", iEmail) :
                new ObjectParameter("iEmail", typeof(string));
    
            var iContactParameter = iContact != null ?
                new ObjectParameter("iContact", iContact) :
                new ObjectParameter("iContact", typeof(string));
    
            var ipositionParameter = iposition != null ?
                new ObjectParameter("iposition", iposition) :
                new ObjectParameter("iposition", typeof(string));
    
            var iMobileParameter = iMobile != null ?
                new ObjectParameter("iMobile", iMobile) :
                new ObjectParameter("iMobile", typeof(string));
    
            var contTelParameter = contTel != null ?
                new ObjectParameter("contTel", contTel) :
                new ObjectParameter("contTel", typeof(string));
    
            var contExtParameter = contExt != null ?
                new ObjectParameter("contExt", contExt) :
                new ObjectParameter("contExt", typeof(string));
    
            var regDocTypeParameter = regDocType != null ?
                new ObjectParameter("RegDocType", regDocType) :
                new ObjectParameter("RegDocType", typeof(string));
    
            var ilicenNoParameter = ilicenNo != null ?
                new ObjectParameter("ilicenNo", ilicenNo) :
                new ObjectParameter("ilicenNo", typeof(string));
    
            var issuingAuthParameter = issuingAuth != null ?
                new ObjectParameter("issuingAuth", issuingAuth) :
                new ObjectParameter("issuingAuth", typeof(string));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("expDate", expDate) :
                new ObjectParameter("expDate", typeof(System.DateTime));
    
            var iCtyCodeParameter = iCtyCode.HasValue ?
                new ObjectParameter("iCtyCode", iCtyCode) :
                new ObjectParameter("iCtyCode", typeof(short));
    
            var iAddr1Parameter = iAddr1 != null ?
                new ObjectParameter("iAddr1", iAddr1) :
                new ObjectParameter("iAddr1", typeof(string));
    
            var iAddr2Parameter = iAddr2 != null ?
                new ObjectParameter("iAddr2", iAddr2) :
                new ObjectParameter("iAddr2", typeof(string));
    
            var cmCityParameter = cmCity != null ?
                new ObjectParameter("cmCity", cmCity) :
                new ObjectParameter("cmCity", typeof(string));
    
            var iPoBoxParameter = iPoBox != null ?
                new ObjectParameter("iPoBox", iPoBox) :
                new ObjectParameter("iPoBox", typeof(string));
    
            var iTel1Parameter = iTel1 != null ?
                new ObjectParameter("iTel1", iTel1) :
                new ObjectParameter("iTel1", typeof(string));
    
            var iFaxParameter = iFax != null ?
                new ObjectParameter("iFax", iFax) :
                new ObjectParameter("iFax", typeof(string));
    
            var supp_idParameter = supp_id.HasValue ?
                new ObjectParameter("Supp_id", supp_id) :
                new ObjectParameter("Supp_id", typeof(int));
    
            var sup_statusParameter = sup_status != null ?
                new ObjectParameter("Sup_status", sup_status) :
                new ObjectParameter("Sup_status", typeof(string));
    
            var suppStatusDateParameter = suppStatusDate.HasValue ?
                new ObjectParameter("SuppStatusDate", suppStatusDate) :
                new ObjectParameter("SuppStatusDate", typeof(System.DateTime));
    
            var compOffiNameParameter = compOffiName != null ?
                new ObjectParameter("CompOffiName", compOffiName) :
                new ObjectParameter("CompOffiName", typeof(string));
    
            var compShortNameParameter = compShortName != null ?
                new ObjectParameter("CompShortName", compShortName) :
                new ObjectParameter("CompShortName", typeof(string));
    
            var supCountryParameter = supCountry.HasValue ?
                new ObjectParameter("supCountry", supCountry) :
                new ObjectParameter("supCountry", typeof(short));
    
            var supBcParameter = supBc != null ?
                new ObjectParameter("supBc", supBc) :
                new ObjectParameter("supBc", typeof(string));
    
            var iModeParameter = iMode != null ?
                new ObjectParameter("iMode", iMode) :
                new ObjectParameter("iMode", typeof(string));
    
            var iusrIdParameter = iusrId != null ?
                new ObjectParameter("iusrId", iusrId) :
                new ObjectParameter("iusrId", typeof(string));
    
            var supTypeParameter = supType != null ?
                new ObjectParameter("supType", supType) :
                new ObjectParameter("supType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditSupplier", iCodeParameter, iNameParameter, iretAccountParameter, iadvAccountParameter, iPayTermParameter, iCreditLimitParameter, iAcctStatusParameter, iEmailParameter, iContactParameter, ipositionParameter, iMobileParameter, contTelParameter, contExtParameter, regDocTypeParameter, ilicenNoParameter, issuingAuthParameter, expDateParameter, iCtyCodeParameter, iAddr1Parameter, iAddr2Parameter, cmCityParameter, iPoBoxParameter, iTel1Parameter, iFaxParameter, supp_idParameter, sup_statusParameter, suppStatusDateParameter, compOffiNameParameter, compShortNameParameter, supCountryParameter, supBcParameter, iModeParameter, iusrIdParameter, supTypeParameter);
        }
    
        public virtual int AddEditSupplierForConsolidation(Nullable<int> iCode, string iName, Nullable<int> iretAccount, Nullable<int> iadvAccount, Nullable<short> iPayTerm, Nullable<decimal> iCreditLimit, Nullable<byte> iAcctStatus, string iEmail, string iContact, string iposition, string iMobile, string contTel, string contExt, string regDocType, string ilicenNo, string issuingAuth, Nullable<System.DateTime> expDate, Nullable<short> iCtyCode, string iAddr1, string iAddr2, string cmCity, string iPoBox, string iTel1, string iFax, Nullable<int> supp_id, string sup_status, Nullable<System.DateTime> suppStatusDate, string compOffiName, string compShortName, Nullable<short> supCountry, string supBc, string iMode, string iusrId, string supType, string iVatRegNo, string iVatRegType, Nullable<bool> iVatIsReg, Nullable<int> iVatAccount, string iVatGrpName)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(int));
    
            var iNameParameter = iName != null ?
                new ObjectParameter("iName", iName) :
                new ObjectParameter("iName", typeof(string));
    
            var iretAccountParameter = iretAccount.HasValue ?
                new ObjectParameter("iretAccount", iretAccount) :
                new ObjectParameter("iretAccount", typeof(int));
    
            var iadvAccountParameter = iadvAccount.HasValue ?
                new ObjectParameter("iadvAccount", iadvAccount) :
                new ObjectParameter("iadvAccount", typeof(int));
    
            var iPayTermParameter = iPayTerm.HasValue ?
                new ObjectParameter("iPayTerm", iPayTerm) :
                new ObjectParameter("iPayTerm", typeof(short));
    
            var iCreditLimitParameter = iCreditLimit.HasValue ?
                new ObjectParameter("iCreditLimit", iCreditLimit) :
                new ObjectParameter("iCreditLimit", typeof(decimal));
    
            var iAcctStatusParameter = iAcctStatus.HasValue ?
                new ObjectParameter("iAcctStatus", iAcctStatus) :
                new ObjectParameter("iAcctStatus", typeof(byte));
    
            var iEmailParameter = iEmail != null ?
                new ObjectParameter("iEmail", iEmail) :
                new ObjectParameter("iEmail", typeof(string));
    
            var iContactParameter = iContact != null ?
                new ObjectParameter("iContact", iContact) :
                new ObjectParameter("iContact", typeof(string));
    
            var ipositionParameter = iposition != null ?
                new ObjectParameter("iposition", iposition) :
                new ObjectParameter("iposition", typeof(string));
    
            var iMobileParameter = iMobile != null ?
                new ObjectParameter("iMobile", iMobile) :
                new ObjectParameter("iMobile", typeof(string));
    
            var contTelParameter = contTel != null ?
                new ObjectParameter("contTel", contTel) :
                new ObjectParameter("contTel", typeof(string));
    
            var contExtParameter = contExt != null ?
                new ObjectParameter("contExt", contExt) :
                new ObjectParameter("contExt", typeof(string));
    
            var regDocTypeParameter = regDocType != null ?
                new ObjectParameter("RegDocType", regDocType) :
                new ObjectParameter("RegDocType", typeof(string));
    
            var ilicenNoParameter = ilicenNo != null ?
                new ObjectParameter("ilicenNo", ilicenNo) :
                new ObjectParameter("ilicenNo", typeof(string));
    
            var issuingAuthParameter = issuingAuth != null ?
                new ObjectParameter("issuingAuth", issuingAuth) :
                new ObjectParameter("issuingAuth", typeof(string));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("expDate", expDate) :
                new ObjectParameter("expDate", typeof(System.DateTime));
    
            var iCtyCodeParameter = iCtyCode.HasValue ?
                new ObjectParameter("iCtyCode", iCtyCode) :
                new ObjectParameter("iCtyCode", typeof(short));
    
            var iAddr1Parameter = iAddr1 != null ?
                new ObjectParameter("iAddr1", iAddr1) :
                new ObjectParameter("iAddr1", typeof(string));
    
            var iAddr2Parameter = iAddr2 != null ?
                new ObjectParameter("iAddr2", iAddr2) :
                new ObjectParameter("iAddr2", typeof(string));
    
            var cmCityParameter = cmCity != null ?
                new ObjectParameter("cmCity", cmCity) :
                new ObjectParameter("cmCity", typeof(string));
    
            var iPoBoxParameter = iPoBox != null ?
                new ObjectParameter("iPoBox", iPoBox) :
                new ObjectParameter("iPoBox", typeof(string));
    
            var iTel1Parameter = iTel1 != null ?
                new ObjectParameter("iTel1", iTel1) :
                new ObjectParameter("iTel1", typeof(string));
    
            var iFaxParameter = iFax != null ?
                new ObjectParameter("iFax", iFax) :
                new ObjectParameter("iFax", typeof(string));
    
            var supp_idParameter = supp_id.HasValue ?
                new ObjectParameter("Supp_id", supp_id) :
                new ObjectParameter("Supp_id", typeof(int));
    
            var sup_statusParameter = sup_status != null ?
                new ObjectParameter("Sup_status", sup_status) :
                new ObjectParameter("Sup_status", typeof(string));
    
            var suppStatusDateParameter = suppStatusDate.HasValue ?
                new ObjectParameter("SuppStatusDate", suppStatusDate) :
                new ObjectParameter("SuppStatusDate", typeof(System.DateTime));
    
            var compOffiNameParameter = compOffiName != null ?
                new ObjectParameter("CompOffiName", compOffiName) :
                new ObjectParameter("CompOffiName", typeof(string));
    
            var compShortNameParameter = compShortName != null ?
                new ObjectParameter("CompShortName", compShortName) :
                new ObjectParameter("CompShortName", typeof(string));
    
            var supCountryParameter = supCountry.HasValue ?
                new ObjectParameter("supCountry", supCountry) :
                new ObjectParameter("supCountry", typeof(short));
    
            var supBcParameter = supBc != null ?
                new ObjectParameter("supBc", supBc) :
                new ObjectParameter("supBc", typeof(string));
    
            var iModeParameter = iMode != null ?
                new ObjectParameter("iMode", iMode) :
                new ObjectParameter("iMode", typeof(string));
    
            var iusrIdParameter = iusrId != null ?
                new ObjectParameter("iusrId", iusrId) :
                new ObjectParameter("iusrId", typeof(string));
    
            var supTypeParameter = supType != null ?
                new ObjectParameter("supType", supType) :
                new ObjectParameter("supType", typeof(string));
    
            var iVatRegNoParameter = iVatRegNo != null ?
                new ObjectParameter("iVatRegNo", iVatRegNo) :
                new ObjectParameter("iVatRegNo", typeof(string));
    
            var iVatRegTypeParameter = iVatRegType != null ?
                new ObjectParameter("iVatRegType", iVatRegType) :
                new ObjectParameter("iVatRegType", typeof(string));
    
            var iVatIsRegParameter = iVatIsReg.HasValue ?
                new ObjectParameter("iVatIsReg", iVatIsReg) :
                new ObjectParameter("iVatIsReg", typeof(bool));
    
            var iVatAccountParameter = iVatAccount.HasValue ?
                new ObjectParameter("iVatAccount", iVatAccount) :
                new ObjectParameter("iVatAccount", typeof(int));
    
            var iVatGrpNameParameter = iVatGrpName != null ?
                new ObjectParameter("iVatGrpName", iVatGrpName) :
                new ObjectParameter("iVatGrpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditSupplierForConsolidation", iCodeParameter, iNameParameter, iretAccountParameter, iadvAccountParameter, iPayTermParameter, iCreditLimitParameter, iAcctStatusParameter, iEmailParameter, iContactParameter, ipositionParameter, iMobileParameter, contTelParameter, contExtParameter, regDocTypeParameter, ilicenNoParameter, issuingAuthParameter, expDateParameter, iCtyCodeParameter, iAddr1Parameter, iAddr2Parameter, cmCityParameter, iPoBoxParameter, iTel1Parameter, iFaxParameter, supp_idParameter, sup_statusParameter, suppStatusDateParameter, compOffiNameParameter, compShortNameParameter, supCountryParameter, supBcParameter, iModeParameter, iusrIdParameter, supTypeParameter, iVatRegNoParameter, iVatRegTypeParameter, iVatIsRegParameter, iVatAccountParameter, iVatGrpNameParameter);
        }
    
        public virtual int AddEditSupplierForDivision(Nullable<int> iAccCode, string iUserId, Nullable<byte> entry, ObjectParameter vError)
        {
            var iAccCodeParameter = iAccCode.HasValue ?
                new ObjectParameter("iAccCode", iAccCode) :
                new ObjectParameter("iAccCode", typeof(int));
    
            var iUserIdParameter = iUserId != null ?
                new ObjectParameter("iUserId", iUserId) :
                new ObjectParameter("iUserId", typeof(string));
    
            var entryParameter = entry.HasValue ?
                new ObjectParameter("entry", entry) :
                new ObjectParameter("entry", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditSupplierForDivision", iAccCodeParameter, iUserIdParameter, entryParameter, vError);
        }
    
        public virtual int AddEditSupplierMapping(Nullable<int> iAccCode, Nullable<int> iRetAccCode, Nullable<int> iAdvAccCode, Nullable<int> iOrgCode, Nullable<int> iOrgAccCode, string iUserId)
        {
            var iAccCodeParameter = iAccCode.HasValue ?
                new ObjectParameter("iAccCode", iAccCode) :
                new ObjectParameter("iAccCode", typeof(int));
    
            var iRetAccCodeParameter = iRetAccCode.HasValue ?
                new ObjectParameter("iRetAccCode", iRetAccCode) :
                new ObjectParameter("iRetAccCode", typeof(int));
    
            var iAdvAccCodeParameter = iAdvAccCode.HasValue ?
                new ObjectParameter("iAdvAccCode", iAdvAccCode) :
                new ObjectParameter("iAdvAccCode", typeof(int));
    
            var iOrgCodeParameter = iOrgCode.HasValue ?
                new ObjectParameter("iOrgCode", iOrgCode) :
                new ObjectParameter("iOrgCode", typeof(int));
    
            var iOrgAccCodeParameter = iOrgAccCode.HasValue ?
                new ObjectParameter("iOrgAccCode", iOrgAccCode) :
                new ObjectParameter("iOrgAccCode", typeof(int));
    
            var iUserIdParameter = iUserId != null ?
                new ObjectParameter("iUserId", iUserId) :
                new ObjectParameter("iUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditSupplierMapping", iAccCodeParameter, iRetAccCodeParameter, iAdvAccCodeParameter, iOrgCodeParameter, iOrgAccCodeParameter, iUserIdParameter);
        }
    
        public virtual int AddHERegEntry(Nullable<int> suppID, string pseEmpCode, string pseEmpName, string pseEID)
        {
            var suppIDParameter = suppID.HasValue ?
                new ObjectParameter("SuppID", suppID) :
                new ObjectParameter("SuppID", typeof(int));
    
            var pseEmpCodeParameter = pseEmpCode != null ?
                new ObjectParameter("pseEmpCode", pseEmpCode) :
                new ObjectParameter("pseEmpCode", typeof(string));
    
            var pseEmpNameParameter = pseEmpName != null ?
                new ObjectParameter("pseEmpName", pseEmpName) :
                new ObjectParameter("pseEmpName", typeof(string));
    
            var pseEIDParameter = pseEID != null ?
                new ObjectParameter("pseEID", pseEID) :
                new ObjectParameter("pseEID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHERegEntry", suppIDParameter, pseEmpCodeParameter, pseEmpNameParameter, pseEIDParameter);
        }
    
        public virtual int CheckBsPlEnable(Nullable<int> iOrgId, ObjectParameter iResult)
        {
            var iOrgIdParameter = iOrgId.HasValue ?
                new ObjectParameter("iOrgId", iOrgId) :
                new ObjectParameter("iOrgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckBsPlEnable", iOrgIdParameter, iResult);
        }
    
        public virtual int chkDuplicateRegID(Nullable<int> accCode, Nullable<short> orgCode, string regType, string regId, ObjectParameter iRetValue)
        {
            var accCodeParameter = accCode.HasValue ?
                new ObjectParameter("AccCode", accCode) :
                new ObjectParameter("AccCode", typeof(int));
    
            var orgCodeParameter = orgCode.HasValue ?
                new ObjectParameter("orgCode", orgCode) :
                new ObjectParameter("orgCode", typeof(short));
    
            var regTypeParameter = regType != null ?
                new ObjectParameter("RegType", regType) :
                new ObjectParameter("RegType", typeof(string));
    
            var regIdParameter = regId != null ?
                new ObjectParameter("RegId", regId) :
                new ObjectParameter("RegId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("chkDuplicateRegID", accCodeParameter, orgCodeParameter, regTypeParameter, regIdParameter, iRetValue);
        }
    
        public virtual int DeleteConProjectMaster(string iCode)
        {
            var iCodeParameter = iCode != null ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteConProjectMaster", iCodeParameter);
        }
    
        public virtual int DeleteCustBussUnits(Nullable<int> iAccCode, Nullable<int> iRetAccCode, Nullable<int> iAdvAccCode)
        {
            var iAccCodeParameter = iAccCode.HasValue ?
                new ObjectParameter("iAccCode", iAccCode) :
                new ObjectParameter("iAccCode", typeof(int));
    
            var iRetAccCodeParameter = iRetAccCode.HasValue ?
                new ObjectParameter("iRetAccCode", iRetAccCode) :
                new ObjectParameter("iRetAccCode", typeof(int));
    
            var iAdvAccCodeParameter = iAdvAccCode.HasValue ?
                new ObjectParameter("iAdvAccCode", iAdvAccCode) :
                new ObjectParameter("iAdvAccCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustBussUnits", iAccCodeParameter, iRetAccCodeParameter, iAdvAccCodeParameter);
        }
    
        public virtual int DeleteHERegEntry(Nullable<int> suppID)
        {
            var suppIDParameter = suppID.HasValue ?
                new ObjectParameter("SuppID", suppID) :
                new ObjectParameter("SuppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHERegEntry", suppIDParameter);
        }
    
        public virtual int DeleteLaborSupplyMaster(Nullable<int> code)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLaborSupplyMaster", codeParameter);
        }
    
        public virtual int DeleteSupplierMapping(Nullable<int> iAccCode, Nullable<int> iRetAccCode, Nullable<int> iAdvAccCode)
        {
            var iAccCodeParameter = iAccCode.HasValue ?
                new ObjectParameter("iAccCode", iAccCode) :
                new ObjectParameter("iAccCode", typeof(int));
    
            var iRetAccCodeParameter = iRetAccCode.HasValue ?
                new ObjectParameter("iRetAccCode", iRetAccCode) :
                new ObjectParameter("iRetAccCode", typeof(int));
    
            var iAdvAccCodeParameter = iAdvAccCode.HasValue ?
                new ObjectParameter("iAdvAccCode", iAdvAccCode) :
                new ObjectParameter("iAdvAccCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSupplierMapping", iAccCodeParameter, iRetAccCodeParameter, iAdvAccCodeParameter);
        }
    
        public virtual int FASGetErrorMsg(Nullable<int> iError, ObjectParameter oSeverity, ObjectParameter oLevel, ObjectParameter oErrorMsg)
        {
            var iErrorParameter = iError.HasValue ?
                new ObjectParameter("iError", iError) :
                new ObjectParameter("iError", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FASGetErrorMsg", iErrorParameter, oSeverity, oLevel, oErrorMsg);
        }
    
        public virtual int GeLaborSupplyMasterByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords, string iTable)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            var iTableParameter = iTable != null ?
                new ObjectParameter("iTable", iTable) :
                new ObjectParameter("iTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeLaborSupplyMasterByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords, iTableParameter);
        }
    
        public virtual int GetAccountsMainGroupByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAccountsMainGroupByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords);
        }
    
        public virtual int GetAccountsSubGroupByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAccountsSubGroupByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords);
        }
    
        public virtual ObjectResult<string> GetAccountType(Nullable<int> accCode, Nullable<int> orgAccCode, string orgLongName, ObjectParameter iRetValue)
        {
            var accCodeParameter = accCode.HasValue ?
                new ObjectParameter("AccCode", accCode) :
                new ObjectParameter("AccCode", typeof(int));
    
            var orgAccCodeParameter = orgAccCode.HasValue ?
                new ObjectParameter("orgAccCode", orgAccCode) :
                new ObjectParameter("orgAccCode", typeof(int));
    
            var orgLongNameParameter = orgLongName != null ?
                new ObjectParameter("orgLongName", orgLongName) :
                new ObjectParameter("orgLongName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAccountType", accCodeParameter, orgAccCodeParameter, orgLongNameParameter, iRetValue);
        }
    
        public virtual ObjectResult<GetAcctStatus_Result> GetAcctStatus(string documentType)
        {
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAcctStatus_Result>("GetAcctStatus", documentTypeParameter);
        }
    
        public virtual ObjectResult<GetAllOrgCostCode_Result> GetAllOrgCostCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOrgCostCode_Result>("GetAllOrgCostCode");
        }
    
        public virtual ObjectResult<GetAllOrgProductMaster_Result> GetAllOrgProductMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOrgProductMaster_Result>("GetAllOrgProductMaster");
        }
    
        public virtual int GetBsplMaingroupByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords, string iTable)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            var iTableParameter = iTable != null ?
                new ObjectParameter("iTable", iTable) :
                new ObjectParameter("iTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBsplMaingroupByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords, iTableParameter);
        }
    
        public virtual int GetBsplMasterByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords, string iTable)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            var iTableParameter = iTable != null ?
                new ObjectParameter("iTable", iTable) :
                new ObjectParameter("iTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBsplMasterByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords, iTableParameter);
        }
    
        public virtual int GetBsplSubgroupByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords, string iTable)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            var iTableParameter = iTable != null ?
                new ObjectParameter("iTable", iTable) :
                new ObjectParameter("iTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBsplSubgroupByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords, iTableParameter);
        }
    
        public virtual int GetConProjectMasterByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords, string iTable)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            var iTableParameter = iTable != null ?
                new ObjectParameter("iTable", iTable) :
                new ObjectParameter("iTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetConProjectMasterByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords, iTableParameter);
        }
    
        public virtual int GetCostCenterOrgByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords, Nullable<int> pgOrg)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            var pgOrgParameter = pgOrg.HasValue ?
                new ObjectParameter("pgOrg", pgOrg) :
                new ObjectParameter("pgOrg", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCostCenterOrgByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords, pgOrgParameter);
        }
    
        public virtual int GetCustIDMaxNo(ObjectParameter iRetValue)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustIDMaxNo", iRetValue);
        }
    
        public virtual ObjectResult<GetCustomerBusiness_Result> GetCustomerBusiness(Nullable<int> iCode)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerBusiness_Result>("GetCustomerBusiness", iCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCustomerBusinessForOrgAccCode(Nullable<int> iCode, Nullable<int> iOrgCode)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(int));
    
            var iOrgCodeParameter = iOrgCode.HasValue ?
                new ObjectParameter("iOrgCode", iOrgCode) :
                new ObjectParameter("iOrgCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCustomerBusinessForOrgAccCode", iCodeParameter, iOrgCodeParameter);
        }
    
        public virtual int GetCustomerName(Nullable<int> accCode, Nullable<short> orgCode)
        {
            var accCodeParameter = accCode.HasValue ?
                new ObjectParameter("AccCode", accCode) :
                new ObjectParameter("AccCode", typeof(int));
    
            var orgCodeParameter = orgCode.HasValue ?
                new ObjectParameter("orgCode", orgCode) :
                new ObjectParameter("orgCode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerName", accCodeParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<GetExitOrgMapping_Result> GetExitOrgMapping(Nullable<int> iCode, Nullable<byte> status)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExitOrgMapping_Result>("GetExitOrgMapping", iCodeParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetHERegEntry_Result> GetHERegEntry(Nullable<int> suppID)
        {
            var suppIDParameter = suppID.HasValue ?
                new ObjectParameter("SuppID", suppID) :
                new ObjectParameter("SuppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHERegEntry_Result>("GetHERegEntry", suppIDParameter);
        }
    
        public virtual int GETITEMMASTER_SP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GETITEMMASTER_SP");
        }
    
        public virtual ObjectResult<Nullable<int>> GetMaxAccountSerial(Nullable<short> iType, Nullable<short> iGroup, Nullable<short> iSubGroup)
        {
            var iTypeParameter = iType.HasValue ?
                new ObjectParameter("iType", iType) :
                new ObjectParameter("iType", typeof(short));
    
            var iGroupParameter = iGroup.HasValue ?
                new ObjectParameter("iGroup", iGroup) :
                new ObjectParameter("iGroup", typeof(short));
    
            var iSubGroupParameter = iSubGroup.HasValue ?
                new ObjectParameter("iSubGroup", iSubGroup) :
                new ObjectParameter("iSubGroup", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMaxAccountSerial", iTypeParameter, iGroupParameter, iSubGroupParameter);
        }
    
        public virtual int GetMaxBsPlMaingroupMaster(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMaxBsPlMaingroupMaster", result);
        }
    
        public virtual int GetMaxBsPlMaster(ObjectParameter result, Nullable<short> mcode, Nullable<short> scode)
        {
            var mcodeParameter = mcode.HasValue ?
                new ObjectParameter("mcode", mcode) :
                new ObjectParameter("mcode", typeof(short));
    
            var scodeParameter = scode.HasValue ?
                new ObjectParameter("scode", scode) :
                new ObjectParameter("scode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMaxBsPlMaster", result, mcodeParameter, scodeParameter);
        }
    
        public virtual int GetMaxBsPlSubgroupMaster(ObjectParameter result, Nullable<short> mcode)
        {
            var mcodeParameter = mcode.HasValue ?
                new ObjectParameter("mcode", mcode) :
                new ObjectParameter("mcode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMaxBsPlSubgroupMaster", result, mcodeParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> GetMaxGroupCode(Nullable<short> iType)
        {
            var iTypeParameter = iType.HasValue ?
                new ObjectParameter("iType", iType) :
                new ObjectParameter("iType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("GetMaxGroupCode", iTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> GetMaxSubGroupCode(Nullable<short> iType, Nullable<short> iGroup)
        {
            var iTypeParameter = iType.HasValue ?
                new ObjectParameter("iType", iType) :
                new ObjectParameter("iType", typeof(short));
    
            var iGroupParameter = iGroup.HasValue ?
                new ObjectParameter("iGroup", iGroup) :
                new ObjectParameter("iGroup", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("GetMaxSubGroupCode", iTypeParameter, iGroupParameter);
        }
    
        public virtual int GetMGRPmode(Nullable<int> iacctType, Nullable<int> iacctMode, ObjectParameter iResult)
        {
            var iacctTypeParameter = iacctType.HasValue ?
                new ObjectParameter("iacctType", iacctType) :
                new ObjectParameter("iacctType", typeof(int));
    
            var iacctModeParameter = iacctMode.HasValue ?
                new ObjectParameter("iacctMode", iacctMode) :
                new ObjectParameter("iacctMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMGRPmode", iacctTypeParameter, iacctModeParameter, iResult);
        }
    
        public virtual int GetNewCustomerSupplierByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords, string iTable)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            var iTableParameter = iTable != null ?
                new ObjectParameter("iTable", iTable) :
                new ObjectParameter("iTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewCustomerSupplierByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords, iTableParameter);
        }
    
        public virtual int GetNewCustomerSupplierLMSByPage(Nullable<int> iCurrentPage, Nullable<int> iPageSize, Nullable<int> iSortType, string iSortCol, string iSearchField, string iSearchValue, string iSearchFilter, ObjectParameter iTotalRecords, string iTable)
        {
            var iCurrentPageParameter = iCurrentPage.HasValue ?
                new ObjectParameter("iCurrentPage", iCurrentPage) :
                new ObjectParameter("iCurrentPage", typeof(int));
    
            var iPageSizeParameter = iPageSize.HasValue ?
                new ObjectParameter("iPageSize", iPageSize) :
                new ObjectParameter("iPageSize", typeof(int));
    
            var iSortTypeParameter = iSortType.HasValue ?
                new ObjectParameter("iSortType", iSortType) :
                new ObjectParameter("iSortType", typeof(int));
    
            var iSortColParameter = iSortCol != null ?
                new ObjectParameter("iSortCol", iSortCol) :
                new ObjectParameter("iSortCol", typeof(string));
    
            var iSearchFieldParameter = iSearchField != null ?
                new ObjectParameter("iSearchField", iSearchField) :
                new ObjectParameter("iSearchField", typeof(string));
    
            var iSearchValueParameter = iSearchValue != null ?
                new ObjectParameter("iSearchValue", iSearchValue) :
                new ObjectParameter("iSearchValue", typeof(string));
    
            var iSearchFilterParameter = iSearchFilter != null ?
                new ObjectParameter("iSearchFilter", iSearchFilter) :
                new ObjectParameter("iSearchFilter", typeof(string));
    
            var iTableParameter = iTable != null ?
                new ObjectParameter("iTable", iTable) :
                new ObjectParameter("iTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewCustomerSupplierLMSByPage", iCurrentPageParameter, iPageSizeParameter, iSortTypeParameter, iSortColParameter, iSearchFieldParameter, iSearchValueParameter, iSearchFilterParameter, iTotalRecords, iTableParameter);
        }
    
        public virtual int GetPossMatchOrgMapping(string suppName)
        {
            var suppNameParameter = suppName != null ?
                new ObjectParameter("SuppName", suppName) :
                new ObjectParameter("SuppName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPossMatchOrgMapping", suppNameParameter);
        }
    
        public virtual ObjectResult<GetRegDocumentType_Result> GetRegDocumentType(string documentType)
        {
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRegDocumentType_Result>("GetRegDocumentType", documentTypeParameter);
        }
    
        public virtual int GetSimilarSuppliers(string supplierName, ObjectParameter output)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("supplierName", supplierName) :
                new ObjectParameter("supplierName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSimilarSuppliers", supplierNameParameter, output);
        }
    
        public virtual int GetSimilarSuppliersOpt(string supplierName, ObjectParameter output)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("supplierName", supplierName) :
                new ObjectParameter("supplierName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSimilarSuppliersOpt", supplierNameParameter, output);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetSupIrgId(string supOrgName)
        {
            var supOrgNameParameter = supOrgName != null ?
                new ObjectParameter("SupOrgName", supOrgName) :
                new ObjectParameter("SupOrgName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetSupIrgId", supOrgNameParameter);
        }
    
        public virtual ObjectResult<GetSupplierDetailsForGrid_Result> GetSupplierDetailsForGrid(Nullable<int> iCode)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierDetailsForGrid_Result>("GetSupplierDetailsForGrid", iCodeParameter);
        }
    
        public virtual int GetSupplierName(Nullable<int> accCode, Nullable<short> orgCode)
        {
            var accCodeParameter = accCode.HasValue ?
                new ObjectParameter("AccCode", accCode) :
                new ObjectParameter("AccCode", typeof(int));
    
            var orgCodeParameter = orgCode.HasValue ?
                new ObjectParameter("orgCode", orgCode) :
                new ObjectParameter("orgCode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSupplierName", accCodeParameter, orgCodeParameter);
        }
    
        public virtual int MATRECTRANS_SP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MATRECTRANS_SP");
        }
    
        public virtual int POLINERECEIVING_SP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("POLINERECEIVING_SP");
        }
    
        public virtual ObjectResult<RetrieveAccountMainGroup_Result> RetrieveAccountMainGroup(Nullable<byte> iAccountType, Nullable<byte> iMainGroupCode)
        {
            var iAccountTypeParameter = iAccountType.HasValue ?
                new ObjectParameter("iAccountType", iAccountType) :
                new ObjectParameter("iAccountType", typeof(byte));
    
            var iMainGroupCodeParameter = iMainGroupCode.HasValue ?
                new ObjectParameter("iMainGroupCode", iMainGroupCode) :
                new ObjectParameter("iMainGroupCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveAccountMainGroup_Result>("RetrieveAccountMainGroup", iAccountTypeParameter, iMainGroupCodeParameter);
        }
    
        public virtual ObjectResult<RetrieveAccountMainGroupForMaster_Result> RetrieveAccountMainGroupForMaster(Nullable<byte> iAccountType, Nullable<byte> iMainGroupCode)
        {
            var iAccountTypeParameter = iAccountType.HasValue ?
                new ObjectParameter("iAccountType", iAccountType) :
                new ObjectParameter("iAccountType", typeof(byte));
    
            var iMainGroupCodeParameter = iMainGroupCode.HasValue ?
                new ObjectParameter("iMainGroupCode", iMainGroupCode) :
                new ObjectParameter("iMainGroupCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveAccountMainGroupForMaster_Result>("RetrieveAccountMainGroupForMaster", iAccountTypeParameter, iMainGroupCodeParameter);
        }
    
        public virtual ObjectResult<RetrieveAccountSubGroup_Result> RetrieveAccountSubGroup(Nullable<short> iAccountType, Nullable<short> iMainGroupCode, Nullable<short> iSubGroupCode)
        {
            var iAccountTypeParameter = iAccountType.HasValue ?
                new ObjectParameter("iAccountType", iAccountType) :
                new ObjectParameter("iAccountType", typeof(short));
    
            var iMainGroupCodeParameter = iMainGroupCode.HasValue ?
                new ObjectParameter("iMainGroupCode", iMainGroupCode) :
                new ObjectParameter("iMainGroupCode", typeof(short));
    
            var iSubGroupCodeParameter = iSubGroupCode.HasValue ?
                new ObjectParameter("iSubGroupCode", iSubGroupCode) :
                new ObjectParameter("iSubGroupCode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveAccountSubGroup_Result>("RetrieveAccountSubGroup", iAccountTypeParameter, iMainGroupCodeParameter, iSubGroupCodeParameter);
        }
    
        public virtual ObjectResult<RetrieveAccountType_Result> RetrieveAccountType(Nullable<short> iAccountType)
        {
            var iAccountTypeParameter = iAccountType.HasValue ?
                new ObjectParameter("iAccountType", iAccountType) :
                new ObjectParameter("iAccountType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveAccountType_Result>("RetrieveAccountType", iAccountTypeParameter);
        }
    
        public virtual ObjectResult<RetrieveAllOrgns_Result> RetrieveAllOrgns(Nullable<int> currentOrgId)
        {
            var currentOrgIdParameter = currentOrgId.HasValue ?
                new ObjectParameter("currentOrgId", currentOrgId) :
                new ObjectParameter("currentOrgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveAllOrgns_Result>("RetrieveAllOrgns", currentOrgIdParameter);
        }
    
        public virtual ObjectResult<RetrieveAllPOorgns_Result> RetrieveAllPOorgns(Nullable<int> currentOrgId)
        {
            var currentOrgIdParameter = currentOrgId.HasValue ?
                new ObjectParameter("currentOrgId", currentOrgId) :
                new ObjectParameter("currentOrgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveAllPOorgns_Result>("RetrieveAllPOorgns", currentOrgIdParameter);
        }
    
        public virtual ObjectResult<RetrieveBranch_Result> RetrieveBranch(Nullable<short> iCode)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveBranch_Result>("RetrieveBranch", iCodeParameter);
        }
    
        public virtual ObjectResult<RetrieveBsPlMainGroupMaster_Result> RetrieveBsPlMainGroupMaster(Nullable<short> code)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveBsPlMainGroupMaster_Result>("RetrieveBsPlMainGroupMaster", codeParameter);
        }
    
        public virtual int RetrieveChqAppForOrgByDateForConsolidation(Nullable<int> chqType, string dtFrom, string dtTo, Nullable<int> suppcode, string frmgrp)
        {
            var chqTypeParameter = chqType.HasValue ?
                new ObjectParameter("ChqType", chqType) :
                new ObjectParameter("ChqType", typeof(int));
    
            var dtFromParameter = dtFrom != null ?
                new ObjectParameter("dtFrom", dtFrom) :
                new ObjectParameter("dtFrom", typeof(string));
    
            var dtToParameter = dtTo != null ?
                new ObjectParameter("dtTo", dtTo) :
                new ObjectParameter("dtTo", typeof(string));
    
            var suppcodeParameter = suppcode.HasValue ?
                new ObjectParameter("suppcode", suppcode) :
                new ObjectParameter("suppcode", typeof(int));
    
            var frmgrpParameter = frmgrp != null ?
                new ObjectParameter("frmgrp", frmgrp) :
                new ObjectParameter("frmgrp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetrieveChqAppForOrgByDateForConsolidation", chqTypeParameter, dtFromParameter, dtToParameter, suppcodeParameter, frmgrpParameter);
        }
    
        public virtual ObjectResult<RetrieveCountry_Result> RetrieveCountry(Nullable<short> iCode)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveCountry_Result>("RetrieveCountry", iCodeParameter);
        }
    
        public virtual ObjectResult<RetrieveCustomerSupplier_Result> RetrieveCustomerSupplier(Nullable<int> iCode)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveCustomerSupplier_Result>("RetrieveCustomerSupplier", iCodeParameter);
        }
    
        public virtual ObjectResult<RetrieveCustomerSupplierLMS_Result> RetrieveCustomerSupplierLMS(Nullable<int> iCode)
        {
            var iCodeParameter = iCode.HasValue ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveCustomerSupplierLMS_Result>("RetrieveCustomerSupplierLMS", iCodeParameter);
        }
    
        public virtual int RetrieveDepartmentsPO(string iCode, Nullable<short> orgCode)
        {
            var iCodeParameter = iCode != null ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(string));
    
            var orgCodeParameter = orgCode.HasValue ?
                new ObjectParameter("orgCode", orgCode) :
                new ObjectParameter("orgCode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetrieveDepartmentsPO", iCodeParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<RetrieveLaborSupplyMaster_Result> RetrieveLaborSupplyMaster(Nullable<int> supId)
        {
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveLaborSupplyMaster_Result>("RetrieveLaborSupplyMaster", supIdParameter);
        }
    
        public virtual int RetrievePorjetMaster(string iCode)
        {
            var iCodeParameter = iCode != null ?
                new ObjectParameter("iCode", iCode) :
                new ObjectParameter("iCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetrievePorjetMaster", iCodeParameter);
        }
    
        public virtual int RptForePurOrderPay(Nullable<int> acctFrom, Nullable<int> divOrgId, string projCode)
        {
            var acctFromParameter = acctFrom.HasValue ?
                new ObjectParameter("acctFrom", acctFrom) :
                new ObjectParameter("acctFrom", typeof(int));
    
            var divOrgIdParameter = divOrgId.HasValue ?
                new ObjectParameter("DivOrgId", divOrgId) :
                new ObjectParameter("DivOrgId", typeof(int));
    
            var projCodeParameter = projCode != null ?
                new ObjectParameter("projCode", projCode) :
                new ObjectParameter("projCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RptForePurOrderPay", acctFromParameter, divOrgIdParameter, projCodeParameter);
        }
    
        public virtual int RptPurchase360Degree(Nullable<int> acctFrom, Nullable<int> divOrgId, string projCode, Nullable<short> rType)
        {
            var acctFromParameter = acctFrom.HasValue ?
                new ObjectParameter("acctFrom", acctFrom) :
                new ObjectParameter("acctFrom", typeof(int));
    
            var divOrgIdParameter = divOrgId.HasValue ?
                new ObjectParameter("DivOrgId", divOrgId) :
                new ObjectParameter("DivOrgId", typeof(int));
    
            var projCodeParameter = projCode != null ?
                new ObjectParameter("projCode", projCode) :
                new ObjectParameter("projCode", typeof(string));
    
            var rTypeParameter = rType.HasValue ?
                new ObjectParameter("rType", rType) :
                new ObjectParameter("rType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RptPurchase360Degree", acctFromParameter, divOrgIdParameter, projCodeParameter, rTypeParameter);
        }
    
        public virtual int RptStatementOfAcctsConlidation(Nullable<int> acctNoFrom, string dtFrom, string dtTo, string frmgrp)
        {
            var acctNoFromParameter = acctNoFrom.HasValue ?
                new ObjectParameter("acctNoFrom", acctNoFrom) :
                new ObjectParameter("acctNoFrom", typeof(int));
    
            var dtFromParameter = dtFrom != null ?
                new ObjectParameter("dtFrom", dtFrom) :
                new ObjectParameter("dtFrom", typeof(string));
    
            var dtToParameter = dtTo != null ?
                new ObjectParameter("dtTo", dtTo) :
                new ObjectParameter("dtTo", typeof(string));
    
            var frmgrpParameter = frmgrp != null ?
                new ObjectParameter("frmgrp", frmgrp) :
                new ObjectParameter("frmgrp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RptStatementOfAcctsConlidation", acctNoFromParameter, dtFromParameter, dtToParameter, frmgrpParameter);
        }
    
        public virtual int SearchSupplierDetails(string accName, string searchAccName, Nullable<int> accCode, string searchAccCode, Nullable<short> accStatus, string searchAccStatus, string suppStatus, string searchSuppStatus, string regDocType, string searchRegDocType, string regDocId, string searchRegDocId, string address, string searchAddress, Nullable<System.DateTime> creationDate, Nullable<System.DateTime> creationDate2, string searchcreationDate, Nullable<byte> searchMapped, Nullable<byte> isVatReg, string searchIsVatReg, string vatRegType, string searchVatRegType, string vatRegNo, string searchVatRegNo, string vatGrpName, string searchVatGrpName)
        {
            var accNameParameter = accName != null ?
                new ObjectParameter("AccName", accName) :
                new ObjectParameter("AccName", typeof(string));
    
            var searchAccNameParameter = searchAccName != null ?
                new ObjectParameter("SearchAccName", searchAccName) :
                new ObjectParameter("SearchAccName", typeof(string));
    
            var accCodeParameter = accCode.HasValue ?
                new ObjectParameter("AccCode", accCode) :
                new ObjectParameter("AccCode", typeof(int));
    
            var searchAccCodeParameter = searchAccCode != null ?
                new ObjectParameter("SearchAccCode", searchAccCode) :
                new ObjectParameter("SearchAccCode", typeof(string));
    
            var accStatusParameter = accStatus.HasValue ?
                new ObjectParameter("AccStatus", accStatus) :
                new ObjectParameter("AccStatus", typeof(short));
    
            var searchAccStatusParameter = searchAccStatus != null ?
                new ObjectParameter("SearchAccStatus", searchAccStatus) :
                new ObjectParameter("SearchAccStatus", typeof(string));
    
            var suppStatusParameter = suppStatus != null ?
                new ObjectParameter("SuppStatus", suppStatus) :
                new ObjectParameter("SuppStatus", typeof(string));
    
            var searchSuppStatusParameter = searchSuppStatus != null ?
                new ObjectParameter("SearchSuppStatus", searchSuppStatus) :
                new ObjectParameter("SearchSuppStatus", typeof(string));
    
            var regDocTypeParameter = regDocType != null ?
                new ObjectParameter("RegDocType", regDocType) :
                new ObjectParameter("RegDocType", typeof(string));
    
            var searchRegDocTypeParameter = searchRegDocType != null ?
                new ObjectParameter("SearchRegDocType", searchRegDocType) :
                new ObjectParameter("SearchRegDocType", typeof(string));
    
            var regDocIdParameter = regDocId != null ?
                new ObjectParameter("RegDocId", regDocId) :
                new ObjectParameter("RegDocId", typeof(string));
    
            var searchRegDocIdParameter = searchRegDocId != null ?
                new ObjectParameter("SearchRegDocId", searchRegDocId) :
                new ObjectParameter("SearchRegDocId", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var searchAddressParameter = searchAddress != null ?
                new ObjectParameter("SearchAddress", searchAddress) :
                new ObjectParameter("SearchAddress", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("creationDate", creationDate) :
                new ObjectParameter("creationDate", typeof(System.DateTime));
    
            var creationDate2Parameter = creationDate2.HasValue ?
                new ObjectParameter("creationDate2", creationDate2) :
                new ObjectParameter("creationDate2", typeof(System.DateTime));
    
            var searchcreationDateParameter = searchcreationDate != null ?
                new ObjectParameter("SearchcreationDate", searchcreationDate) :
                new ObjectParameter("SearchcreationDate", typeof(string));
    
            var searchMappedParameter = searchMapped.HasValue ?
                new ObjectParameter("SearchMapped", searchMapped) :
                new ObjectParameter("SearchMapped", typeof(byte));
    
            var isVatRegParameter = isVatReg.HasValue ?
                new ObjectParameter("IsVatReg", isVatReg) :
                new ObjectParameter("IsVatReg", typeof(byte));
    
            var searchIsVatRegParameter = searchIsVatReg != null ?
                new ObjectParameter("SearchIsVatReg", searchIsVatReg) :
                new ObjectParameter("SearchIsVatReg", typeof(string));
    
            var vatRegTypeParameter = vatRegType != null ?
                new ObjectParameter("VatRegType", vatRegType) :
                new ObjectParameter("VatRegType", typeof(string));
    
            var searchVatRegTypeParameter = searchVatRegType != null ?
                new ObjectParameter("SearchVatRegType", searchVatRegType) :
                new ObjectParameter("SearchVatRegType", typeof(string));
    
            var vatRegNoParameter = vatRegNo != null ?
                new ObjectParameter("VatRegNo", vatRegNo) :
                new ObjectParameter("VatRegNo", typeof(string));
    
            var searchVatRegNoParameter = searchVatRegNo != null ?
                new ObjectParameter("SearchVatRegNo", searchVatRegNo) :
                new ObjectParameter("SearchVatRegNo", typeof(string));
    
            var vatGrpNameParameter = vatGrpName != null ?
                new ObjectParameter("VatGrpName", vatGrpName) :
                new ObjectParameter("VatGrpName", typeof(string));
    
            var searchVatGrpNameParameter = searchVatGrpName != null ?
                new ObjectParameter("SearchVatGrpName", searchVatGrpName) :
                new ObjectParameter("SearchVatGrpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchSupplierDetails", accNameParameter, searchAccNameParameter, accCodeParameter, searchAccCodeParameter, accStatusParameter, searchAccStatusParameter, suppStatusParameter, searchSuppStatusParameter, regDocTypeParameter, searchRegDocTypeParameter, regDocIdParameter, searchRegDocIdParameter, addressParameter, searchAddressParameter, creationDateParameter, creationDate2Parameter, searchcreationDateParameter, searchMappedParameter, isVatRegParameter, searchIsVatRegParameter, vatRegTypeParameter, searchVatRegTypeParameter, vatRegNoParameter, searchVatRegNoParameter, vatGrpNameParameter, searchVatGrpNameParameter);
        }
    
        public virtual ObjectResult<SUPPYMTTRANS_SP_Result> SUPPYMTTRANS_SP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUPPYMTTRANS_SP_Result>("SUPPYMTTRANS_SP");
        }
    
        public virtual int uspAgeingForComsolidationReport(Nullable<byte> iType, Nullable<System.DateTime> iDateUpTo, Nullable<byte> balType, Nullable<byte> repType, Nullable<byte> orderBy, Nullable<int> orgId, Nullable<short> acctGrp, Nullable<short> acctSgrp, Nullable<int> acctNoFrom, string frmgrp)
        {
            var iTypeParameter = iType.HasValue ?
                new ObjectParameter("iType", iType) :
                new ObjectParameter("iType", typeof(byte));
    
            var iDateUpToParameter = iDateUpTo.HasValue ?
                new ObjectParameter("iDateUpTo", iDateUpTo) :
                new ObjectParameter("iDateUpTo", typeof(System.DateTime));
    
            var balTypeParameter = balType.HasValue ?
                new ObjectParameter("balType", balType) :
                new ObjectParameter("balType", typeof(byte));
    
            var repTypeParameter = repType.HasValue ?
                new ObjectParameter("repType", repType) :
                new ObjectParameter("repType", typeof(byte));
    
            var orderByParameter = orderBy.HasValue ?
                new ObjectParameter("orderBy", orderBy) :
                new ObjectParameter("orderBy", typeof(byte));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("orgId", orgId) :
                new ObjectParameter("orgId", typeof(int));
    
            var acctGrpParameter = acctGrp.HasValue ?
                new ObjectParameter("acctGrp", acctGrp) :
                new ObjectParameter("acctGrp", typeof(short));
    
            var acctSgrpParameter = acctSgrp.HasValue ?
                new ObjectParameter("acctSgrp", acctSgrp) :
                new ObjectParameter("acctSgrp", typeof(short));
    
            var acctNoFromParameter = acctNoFrom.HasValue ?
                new ObjectParameter("acctNoFrom", acctNoFrom) :
                new ObjectParameter("acctNoFrom", typeof(int));
    
            var frmgrpParameter = frmgrp != null ?
                new ObjectParameter("frmgrp", frmgrp) :
                new ObjectParameter("frmgrp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAgeingForComsolidationReport", iTypeParameter, iDateUpToParameter, balTypeParameter, repTypeParameter, orderByParameter, orgIdParameter, acctGrpParameter, acctSgrpParameter, acctNoFromParameter, frmgrpParameter);
        }
    
        public virtual ObjectResult<uspGetOrgParaFileByOrgId_Result> uspGetOrgParaFileByOrgId(Nullable<int> orgId)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("orgId", orgId) :
                new ObjectParameter("orgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetOrgParaFileByOrgId_Result>("uspGetOrgParaFileByOrgId", orgIdParameter);
        }
    
        public virtual ObjectResult<uspSecGetRptVouchertHeader_Result> uspSecGetRptVouchertHeader(Nullable<int> orgCode)
        {
            var orgCodeParameter = orgCode.HasValue ?
                new ObjectParameter("orgCode", orgCode) :
                new ObjectParameter("orgCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSecGetRptVouchertHeader_Result>("uspSecGetRptVouchertHeader", orgCodeParameter);
        }
    
        public virtual int ValidateSupplier(Nullable<int> orgAccCode, Nullable<short> orgCodev, string regType, string regId, ObjectParameter iRetValue)
        {
            var orgAccCodeParameter = orgAccCode.HasValue ?
                new ObjectParameter("orgAccCode", orgAccCode) :
                new ObjectParameter("orgAccCode", typeof(int));
    
            var orgCodevParameter = orgCodev.HasValue ?
                new ObjectParameter("orgCodev", orgCodev) :
                new ObjectParameter("orgCodev", typeof(short));
    
            var regTypeParameter = regType != null ?
                new ObjectParameter("RegType", regType) :
                new ObjectParameter("RegType", typeof(string));
    
            var regIdParameter = regId != null ?
                new ObjectParameter("RegId", regId) :
                new ObjectParameter("RegId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidateSupplier", orgAccCodeParameter, orgCodevParameter, regTypeParameter, regIdParameter, iRetValue);
        }
    }
}
